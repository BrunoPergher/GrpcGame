// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: memoria.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MemoriaServidor_Conectar_FullMethodName = "/agenda.MemoriaServidor/conectar"
)

// MemoriaServidorClient is the client API for MemoriaServidor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Definição da interface do serviço (métodos que poderão ser invocados)
type MemoriaServidorClient interface {
	Conectar(ctx context.Context, in *Jogador, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
}

type memoriaServidorClient struct {
	cc grpc.ClientConnInterface
}

func NewMemoriaServidorClient(cc grpc.ClientConnInterface) MemoriaServidorClient {
	return &memoriaServidorClient{cc}
}

func (c *memoriaServidorClient) Conectar(ctx context.Context, in *Jogador, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, MemoriaServidor_Conectar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemoriaServidorServer is the server API for MemoriaServidor service.
// All implementations must embed UnimplementedMemoriaServidorServer
// for forward compatibility
//
// Definição da interface do serviço (métodos que poderão ser invocados)
type MemoriaServidorServer interface {
	Conectar(context.Context, *Jogador) (*wrapperspb.BoolValue, error)
	mustEmbedUnimplementedMemoriaServidorServer()
}

// UnimplementedMemoriaServidorServer must be embedded to have forward compatible implementations.
type UnimplementedMemoriaServidorServer struct {
}

func (UnimplementedMemoriaServidorServer) Conectar(context.Context, *Jogador) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Conectar not implemented")
}
func (UnimplementedMemoriaServidorServer) mustEmbedUnimplementedMemoriaServidorServer() {}

// UnsafeMemoriaServidorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemoriaServidorServer will
// result in compilation errors.
type UnsafeMemoriaServidorServer interface {
	mustEmbedUnimplementedMemoriaServidorServer()
}

func RegisterMemoriaServidorServer(s grpc.ServiceRegistrar, srv MemoriaServidorServer) {
	s.RegisterService(&MemoriaServidor_ServiceDesc, srv)
}

func _MemoriaServidor_Conectar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jogador)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemoriaServidorServer).Conectar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemoriaServidor_Conectar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemoriaServidorServer).Conectar(ctx, req.(*Jogador))
	}
	return interceptor(ctx, in, info, handler)
}

// MemoriaServidor_ServiceDesc is the grpc.ServiceDesc for MemoriaServidor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemoriaServidor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agenda.MemoriaServidor",
	HandlerType: (*MemoriaServidorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "conectar",
			Handler:    _MemoriaServidor_Conectar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "memoria.proto",
}

const (
	MemoriaCliente_InformarJogador_FullMethodName = "/agenda.MemoriaCliente/informarJogador"
	MemoriaCliente_ReceberJogada_FullMethodName   = "/agenda.MemoriaCliente/receberJogada"
	MemoriaCliente_InformarFimJogo_FullMethodName = "/agenda.MemoriaCliente/informarFimJogo"
)

// MemoriaClienteClient is the client API for MemoriaCliente service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemoriaClienteClient interface {
	InformarJogador(ctx context.Context, in *Jogo, opts ...grpc.CallOption) (*Jogada, error)
	ReceberJogada(ctx context.Context, in *Jogo, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	InformarFimJogo(ctx context.Context, in *Jogo, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
}

type memoriaClienteClient struct {
	cc grpc.ClientConnInterface
}

func NewMemoriaClienteClient(cc grpc.ClientConnInterface) MemoriaClienteClient {
	return &memoriaClienteClient{cc}
}

func (c *memoriaClienteClient) InformarJogador(ctx context.Context, in *Jogo, opts ...grpc.CallOption) (*Jogada, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Jogada)
	err := c.cc.Invoke(ctx, MemoriaCliente_InformarJogador_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memoriaClienteClient) ReceberJogada(ctx context.Context, in *Jogo, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, MemoriaCliente_ReceberJogada_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memoriaClienteClient) InformarFimJogo(ctx context.Context, in *Jogo, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, MemoriaCliente_InformarFimJogo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemoriaClienteServer is the server API for MemoriaCliente service.
// All implementations must embed UnimplementedMemoriaClienteServer
// for forward compatibility
type MemoriaClienteServer interface {
	InformarJogador(context.Context, *Jogo) (*Jogada, error)
	ReceberJogada(context.Context, *Jogo) (*wrapperspb.BoolValue, error)
	InformarFimJogo(context.Context, *Jogo) (*wrapperspb.BoolValue, error)
	mustEmbedUnimplementedMemoriaClienteServer()
}

// UnimplementedMemoriaClienteServer must be embedded to have forward compatible implementations.
type UnimplementedMemoriaClienteServer struct {
}

func (UnimplementedMemoriaClienteServer) InformarJogador(context.Context, *Jogo) (*Jogada, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformarJogador not implemented")
}
func (UnimplementedMemoriaClienteServer) ReceberJogada(context.Context, *Jogo) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceberJogada not implemented")
}
func (UnimplementedMemoriaClienteServer) InformarFimJogo(context.Context, *Jogo) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformarFimJogo not implemented")
}
func (UnimplementedMemoriaClienteServer) mustEmbedUnimplementedMemoriaClienteServer() {}

// UnsafeMemoriaClienteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemoriaClienteServer will
// result in compilation errors.
type UnsafeMemoriaClienteServer interface {
	mustEmbedUnimplementedMemoriaClienteServer()
}

func RegisterMemoriaClienteServer(s grpc.ServiceRegistrar, srv MemoriaClienteServer) {
	s.RegisterService(&MemoriaCliente_ServiceDesc, srv)
}

func _MemoriaCliente_InformarJogador_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jogo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemoriaClienteServer).InformarJogador(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemoriaCliente_InformarJogador_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemoriaClienteServer).InformarJogador(ctx, req.(*Jogo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemoriaCliente_ReceberJogada_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jogo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemoriaClienteServer).ReceberJogada(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemoriaCliente_ReceberJogada_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemoriaClienteServer).ReceberJogada(ctx, req.(*Jogo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemoriaCliente_InformarFimJogo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jogo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemoriaClienteServer).InformarFimJogo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemoriaCliente_InformarFimJogo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemoriaClienteServer).InformarFimJogo(ctx, req.(*Jogo))
	}
	return interceptor(ctx, in, info, handler)
}

// MemoriaCliente_ServiceDesc is the grpc.ServiceDesc for MemoriaCliente service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemoriaCliente_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agenda.MemoriaCliente",
	HandlerType: (*MemoriaClienteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "informarJogador",
			Handler:    _MemoriaCliente_InformarJogador_Handler,
		},
		{
			MethodName: "receberJogada",
			Handler:    _MemoriaCliente_ReceberJogada_Handler,
		},
		{
			MethodName: "informarFimJogo",
			Handler:    _MemoriaCliente_InformarFimJogo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "memoria.proto",
}
